from . import zenpacklib
import json

zenpacklib.load_yaml()

#class NestedComponent(zenpacklib.ComponentBase):
class NestedComponent(zenpacklib.Component):
    """
    zenpacklib.py defines ComponentBase class for all zpl components.
    Its rrdPath routine changes the standard Zenoss 4 default of creating rrd files
    under subdirectories with the component name. ie.
        original    <device name>/<comp relation name>/<comp name>/xyz.rrd
        zenpacklib  <device name>/<comp name>/xyz.rrd
    Comment in zenpacklib makes sense....
       Overrides RRDView to flatten component RRD files into a single
        subdirectory per-component per-device. This allows for the
        possibility of a component changing its contained path within
        the device without losing historical performance data.

        This requires that each component have a unique id within the
        device's namespace.
    but, to preserve data compatibility if upgrading an existing zenpack to use zpl
    then you need to revert rrdPath back to the original directory format.

    Having defined this NestedComponent class, you then need to use it in zenpack.yaml
    file as the "base" attribute for component classes, eg:

    """


    def rrdPath(self):

        #original = super(zenpacklib.Component, self).rrdPath()
        original = super(zenpacklib.ComponentBase, self).rrdPath()
        try:
            # Zenoss 5 returns a JSONified dict from rrdPath.
            # Don't care about rrd file structure in Zenoss 5
            json.loads(original)
        except ValueError:
            # Zenoss 4 and earlier return a string that starts with "Devices/"
            # Next line is what is in zenpacklib.py - no comp reln subdir
            #return os.path.join('Devices', self.device().id, self.id)
            return original
        else:
            return original

        return 

