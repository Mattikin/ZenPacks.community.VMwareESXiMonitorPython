################################################################################
#
# This program is part of the VMwareESXiMonitor Zenpack for Zenoss.
# Copyright (C) 2014 Eric Enns, Matthias Kittl.
# Totally rewritten by Jane Curyy, September 2015 to use the
#     pyvmomi API to gather info directly from the PythonCollectore modeler
#
# This program can be used under the GNU General Public License version 2
# You can find full information here: http://www.zenoss.com/oss
#
################################################################################

__doc__ = """VMwareESXiHostMap

VMwareESXiHostMap gathers ESXi Host information.

"""

from pyVim.connect import SmartConnect, Disconnect
from pyVmomi import vim
import atexit
from twisted.internet.defer import returnValue, inlineCallbacks
from Products.DataCollector.plugins.CollectorPlugin import PythonPlugin
from Products.DataCollector.plugins.DataMaps import ObjectMap

def getData(host, username, password, port, log):
    
    log.debug('In getData. host is %s, username is %s, password is %s, port is %s \n' % (host, username, password, port))
    serviceInstance = SmartConnect(host=host,
                                   user=username,
                                   pwd=password,
                                   port=port)
    atexit.register(Disconnect, serviceInstance)
    content = serviceInstance.RetrieveContent()
    host_view = content.viewManager.CreateContainerView(content.rootFolder,
                                                        [vim.HostSystem],
                                                        True)
    hosts = [host for host in host_view.view]
    log.debug(' in getData - hosts is %s \n' % (hosts))
    host_view.Destroy()
    hostDictAll = {}
    for host in hosts:
        # Don't actually see there being more than one host.....
        hostDict = {}
        #host1 = 'fred'
        #hostDict[host1]['osProduct'] = host.summary.config.product.fullName
        #hostDict[host1]['hwProduct'] = host.summary.hardware.model
        #hostDict[host1]['hwVendor'] = host.summary.hardware.vendor
        #hostDict[host1]['memorySize'] = host.summary.hardware.memorySize
        #hostDict[host1]['cpuMhz'] = long(host.summary.hardware.cpuMhz)
        #hostDict[host1]['cpuModel'] = host.summary.hardware.cpuModel
        #hostDict[host1]['numCpuCores'] = int(host.summary.hardware.numCpuCores)
        #hostDict[host1]['numCpuPkgs'] = int(host.summary.hardware.numCpuPkgs)
        #hostDict[host1]['numCpuThreads'] = int(host.summary.hardware.numCpuThreads)
        #hostDict[host1]['numNics'] = int(host.summary.hardware.numNics)
        #hostDict[host1]['esxiHostName'] = host.summary.config.name
        #hostDict[host1]['vmotionState'] = host.summary.config.vmotionEnabled
        hostDict['osProduct'] = host.summary.config.product.fullName
        hostDict['hwProduct'] = host.summary.hardware.model
        hostDict['hwVendor'] = host.summary.hardware.vendor
        hostDict['memorySize'] = host.summary.hardware.memorySize
        hostDict['cpuMhz'] = long(host.summary.hardware.cpuMhz)
        hostDict['cpuModel'] = host.summary.hardware.cpuModel
        hostDict['numCpuCores'] = int(host.summary.hardware.numCpuCores)
        hostDict['numCpuPkgs'] = int(host.summary.hardware.numCpuPkgs)
        hostDict['numCpuThreads'] = int(host.summary.hardware.numCpuThreads)
        hostDict['numNics'] = int(host.summary.hardware.numNics)
        hostDict['esxiHostName'] = host.summary.config.name
        hostDict['vmotionState'] = host.summary.config.vmotionEnabled
        log.debug(' hostDict is %s \n' % (hostDict))
        #hostDictAll[host] = hostDict
        hostDictAll = hostDict

    log.debug('hostDictAll is %s \n' % (hostDictAll))
    return hostDictAll

class VMwareESXiHostMap(PythonPlugin):
    deviceProperties = PythonPlugin.deviceProperties + (
        'zVSphereUsername',
        'zVSpherePassword'
    )

    @inlineCallbacks
    def collect(self, device, log):

        log.info('Getting VMware ESXi host info for device %s' % device.id)
        username = getattr(device, 'zVSphereUsername', None)
        password = getattr(device, 'zVSpherePassword', None)
        if (not username or not password):
            #return None
            returnValue(None)
        port = 443
        #s = getData(device.manageIp, username, password, port, log)
        try:
            s = yield getData(device.manageIp, username, password, port, log)
            #s = getData(device.manageIp, username, password, port, log)
            #print ' \n\nResult is %s \n\n' % (s)
        except Exception, e:
            log.error(
                    "In collect exception %s: %s", device.id, e)
            returnValue(None)
            #return
        log.info('Response is %s \n' % (s))
        returnValue(s)
        #return s

    def process(self, device, results, log):
        maps = []
        #for host in results:
        v = results
        #for k, v in results.iteritems():
            #print('Host key is %s . Host is %s \n' % (k, v['esxiHostName']))
        print('Host is %s \n' % ( v['esxiHostName']))
        maps.append(ObjectMap({'totalMemory': v['memorySize']}, compname='hw'))
        maps.append(ObjectMap({'totalSwap': 0}, compname='os'))
        om = self.objectMap()
        om.setOSProductKey = v['osProduct']
        om.setHWProductKey = v['hwProduct']
        om.cpuMhz = v['cpuMhz']
        om.cpuModel = v['cpuModel']
        om.numCpuCores = v['numCpuCores']
        om.numCpuPkgs = v['numCpuPkgs']
        om.numCpuCoresPerPkgs = v['numCpuCores'] / v['numCpuPkgs']
        om.numCpuThreads = v['numCpuThreads']
        om.numNics = v['numNics']
        om.esxiHostName = v['esxiHostName']
        if v['vmotionState'] == 0:
            om.vmotionState = True
        else:
            om.vmotionState = False
        maps.append(om)

        return maps

